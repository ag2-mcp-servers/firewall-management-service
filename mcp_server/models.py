# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:32:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AWSAccountId(
    RootModel[constr(pattern=r'^[0-9]+$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^[0-9]+$', min_length=1, max_length=1024)


class AWSAccountIdList(RootModel[List[AWSAccountId]]):
    root: List[AWSAccountId]


class AWSRegion(
    RootModel[
        constr(
            pattern=r'^(af|ap|ca|eu|il|me|mx|sa|us|cn|us-gov)-\w+-\d+$',
            min_length=6,
            max_length=32,
        )
    ]
):
    root: constr(
        pattern=r'^(af|ap|ca|eu|il|me|mx|sa|us|cn|us-gov)-\w+-\d+$',
        min_length=6,
        max_length=32,
    )


class AWSRegionList(RootModel[List[AWSRegion]]):
    root: List[AWSRegion] = Field(..., max_length=64, min_length=0)


class AccountIdList(RootModel[List[AWSAccountId]]):
    root: List[AWSAccountId]


class AccountRoleStatus(Enum):
    READY = 'READY'
    CREATING = 'CREATING'
    PENDING_DELETION = 'PENDING_DELETION'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class AssociateAdminAccountRequest(BaseModel):
    AdminAccount: AWSAccountId


class Base62Id(
    RootModel[constr(pattern=r'^[a-z0-9A-Z]{22}$', min_length=22, max_length=22)]
):
    root: constr(pattern=r'^[a-z0-9A-Z]{22}$', min_length=22, max_length=22)


class BasicInteger(RootModel[conint(ge=-2147483648, le=2147483647)]):
    root: conint(ge=-2147483648, le=2147483647)


class Boolean(RootModel[bool]):
    root: bool


class CIDR(RootModel[constr(pattern=r'[a-f0-9:./]+', min_length=0, max_length=256)]):
    root: constr(pattern=r'[a-f0-9:./]+', min_length=0, max_length=256)


class CustomerPolicyScopeId(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
    )


class CustomerPolicyScopeIdList(RootModel[List[CustomerPolicyScopeId]]):
    root: List[CustomerPolicyScopeId]


class CustomerPolicyScopeIdType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORG_UNIT = 'ORG_UNIT'


class CustomerPolicyScopeMap(RootModel[Optional[Dict[str, CustomerPolicyScopeIdList]]]):
    root: Optional[Dict[str, CustomerPolicyScopeIdList]] = None


class CustomerPolicyStatus(Enum):
    ACTIVE = 'ACTIVE'
    OUT_OF_ADMIN_SCOPE = 'OUT_OF_ADMIN_SCOPE'


class DeleteNotificationChannelRequest(BaseModel):
    pass


class DeleteResourceSetRequest(BaseModel):
    Identifier: Base62Id


class DependentServiceName(Enum):
    AWSCONFIG = 'AWSCONFIG'
    AWSWAF = 'AWSWAF'
    AWSSHIELD_ADVANCED = 'AWSSHIELD_ADVANCED'
    AWSVPC = 'AWSVPC'


class Description(
    RootModel[constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)]
):
    root: constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)


class DestinationType(Enum):
    IPV4 = 'IPV4'
    IPV6 = 'IPV6'
    PREFIX_LIST = 'PREFIX_LIST'


class DetailedInfo(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=,+\-@]*)$', min_length=1, max_length=4096
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=,+\-@]*)$', min_length=1, max_length=4096
    )


class DisassociateAdminAccountRequest(BaseModel):
    pass


class DnsRuleGroupPriority(RootModel[conint(ge=0, le=10000)]):
    root: conint(ge=0, le=10000)


class FailedItemReason(Enum):
    NOT_VALID_ARN = 'NOT_VALID_ARN'
    NOT_VALID_PARTITION = 'NOT_VALID_PARTITION'
    NOT_VALID_REGION = 'NOT_VALID_REGION'
    NOT_VALID_SERVICE = 'NOT_VALID_SERVICE'
    NOT_VALID_RESOURCE_TYPE = 'NOT_VALID_RESOURCE_TYPE'
    NOT_VALID_ACCOUNT_ID = 'NOT_VALID_ACCOUNT_ID'


class FirewallDeploymentModel(Enum):
    CENTRALIZED = 'CENTRALIZED'
    DISTRIBUTED = 'DISTRIBUTED'


class FirewallPolicyId(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
    )


class FirewallPolicyName(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
    )


class GetAdminAccountRequest(BaseModel):
    pass


class GetAdminAccountResponse(BaseModel):
    AdminAccount: Optional[AWSAccountId] = None
    RoleStatus: Optional[AccountRoleStatus] = None


class GetAdminScopeRequest(BaseModel):
    AdminAccount: AWSAccountId


class GetNotificationChannelRequest(BaseModel):
    pass


class GetResourceSetRequest(BaseModel):
    Identifier: Base62Id


class IPPortNumber(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class Identifier(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=2048
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=2048
    )


class IdentifierList(RootModel[List[Identifier]]):
    root: List[Identifier]


class InternalErrorException(RootModel[Any]):
    root: Any


class InvalidInputException(RootModel[Any]):
    root: Any


class InvalidOperationException(RootModel[Any]):
    root: Any


class InvalidTypeException(RootModel[Any]):
    root: Any


class IssueInfoMap(RootModel[Optional[Dict[str, DetailedInfo]]]):
    root: Optional[Dict[str, DetailedInfo]] = None


class LengthBoundedString(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class LengthBoundedStringList(RootModel[List[LengthBoundedString]]):
    root: List[LengthBoundedString]


class LimitExceededException(RootModel[Any]):
    root: Any


class ListId(
    RootModel[constr(pattern=r'^[a-z0-9A-Z-]{36}$', min_length=36, max_length=36)]
):
    root: constr(pattern=r'^[a-z0-9A-Z-]{36}$', min_length=36, max_length=36)


class ManagedServiceData(
    RootModel[constr(pattern=r'^((?!\\[nr]).)+', min_length=1, max_length=10000)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^((?!\\[nr]).)+', min_length=1, max_length=10000)


class MarketplaceSubscriptionOnboardingStatus(Enum):
    NO_SUBSCRIPTION = 'NO_SUBSCRIPTION'
    NOT_COMPLETE = 'NOT_COMPLETE'
    COMPLETE = 'COMPLETE'


class MemberAccounts(RootModel[List[AWSAccountId]]):
    root: List[AWSAccountId]


class Name(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class NetworkFirewallAction(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]+$', min_length=1, max_length=128)


class NetworkFirewallActionList(RootModel[List[NetworkFirewallAction]]):
    root: List[NetworkFirewallAction]


class NetworkFirewallOverrideAction(Enum):
    DROP_TO_ALERT = 'DROP_TO_ALERT'


class NetworkFirewallPolicy(BaseModel):
    FirewallDeploymentModel_1: Optional[FirewallDeploymentModel] = Field(
        None, alias='FirewallDeploymentModel'
    )


class NetworkFirewallResourceName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=128)


class NetworkFirewallStatefulRuleGroupOverride(BaseModel):
    Action: Optional[NetworkFirewallOverrideAction] = None


class OrganizationStatus(Enum):
    ONBOARDING = 'ONBOARDING'
    ONBOARDING_COMPLETE = 'ONBOARDING_COMPLETE'
    OFFBOARDING = 'OFFBOARDING'
    OFFBOARDING_COMPLETE = 'OFFBOARDING_COMPLETE'


class OrganizationalUnitId(
    RootModel[
        constr(
            pattern=r'^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$', min_length=16, max_length=68
        )
    ]
):
    root: constr(
        pattern=r'^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$', min_length=16, max_length=68
    )


class OrganizationalUnitIdList(RootModel[List[OrganizationalUnitId]]):
    root: List[OrganizationalUnitId]


class OrganizationalUnitScope(BaseModel):
    AllOrganizationalUnitsEnabled: Optional[Boolean] = None
    ExcludeSpecifiedOrganizationalUnits: Optional[Boolean] = None
    OrganizationalUnits: Optional[OrganizationalUnitIdList] = None


class PaginationMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PaginationToken(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=4096
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=4096
    )


class PolicyComplianceStatusType(Enum):
    COMPLIANT = 'COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'


class PolicyId(
    RootModel[constr(pattern=r'^[a-z0-9A-Z-]{36}$', min_length=36, max_length=36)]
):
    root: constr(pattern=r'^[a-z0-9A-Z-]{36}$', min_length=36, max_length=36)


class PolicyUpdateToken(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
    )


class PreviousListVersion(
    RootModel[constr(pattern=r'^\d{1,2}$', min_length=1, max_length=2)]
):
    root: constr(pattern=r'^\d{1,2}$', min_length=1, max_length=2)


class PriorityNumber(RootModel[int]):
    root: int


class ProtectionData(RootModel[str]):
    root: str


class Protocol(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=20)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=20
    )


class ProtocolsList(RootModel[List[Protocol]]):
    root: List[Protocol]


class ReferenceRule(RootModel[str]):
    root: str


class RegionScope(BaseModel):
    AllRegionsEnabled: Optional[Boolean] = None
    Regions: Optional[AWSRegionList] = None


class RemediationActionDescription(
    RootModel[constr(pattern=r'.*', min_length=0, max_length=1024)]
):
    root: constr(pattern=r'.*', min_length=0, max_length=1024)


class RemediationActionType(Enum):
    REMOVE = 'REMOVE'
    MODIFY = 'MODIFY'


class Resource(BaseModel):
    AccountId: Optional[AWSAccountId] = None
    URI: Identifier


class ResourceArn(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
    )


class ResourceCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ResourceDescription(
    RootModel[constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)]
):
    root: constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)


class ResourceId(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
    )


class ResourceIdList(RootModel[List[ResourceId]]):
    root: List[ResourceId]


class ResourceList(RootModel[List[Resource]]):
    root: List[Resource]


class ResourceName(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceSetIds(RootModel[List[Base62Id]]):
    root: List[Base62Id]


class ResourceSetStatus(Enum):
    ACTIVE = 'ACTIVE'
    OUT_OF_ADMIN_SCOPE = 'OUT_OF_ADMIN_SCOPE'


class ResourceTagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class ResourceTagValue(
    RootModel[constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)]
):
    root: constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)


class ResourceType(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class ResourceTypeList(RootModel[List[ResourceType]]):
    root: List[ResourceType]


class RuleOrder(Enum):
    STRICT_ORDER = 'STRICT_ORDER'
    DEFAULT_ACTION_ORDER = 'DEFAULT_ACTION_ORDER'


class SecurityGroupRuleDescription(BaseModel):
    FromPort: Optional[IPPortNumber] = None
    IPV4Range: Optional[CIDR] = None
    IPV6Range: Optional[CIDR] = None
    PrefixListId: Optional[ResourceId] = None
    Protocol: Optional[LengthBoundedString] = None
    ToPort: Optional[IPPortNumber] = None


class SecurityServiceType(Enum):
    WAF = 'WAF'
    WAFV2 = 'WAFV2'
    SHIELD_ADVANCED = 'SHIELD_ADVANCED'
    SECURITY_GROUPS_COMMON = 'SECURITY_GROUPS_COMMON'
    SECURITY_GROUPS_CONTENT_AUDIT = 'SECURITY_GROUPS_CONTENT_AUDIT'
    SECURITY_GROUPS_USAGE_AUDIT = 'SECURITY_GROUPS_USAGE_AUDIT'
    NETWORK_FIREWALL = 'NETWORK_FIREWALL'
    DNS_FIREWALL = 'DNS_FIREWALL'
    THIRD_PARTY_FIREWALL = 'THIRD_PARTY_FIREWALL'
    IMPORT_NETWORK_FIREWALL = 'IMPORT_NETWORK_FIREWALL'


class SecurityServiceTypeList(RootModel[List[SecurityServiceType]]):
    root: List[SecurityServiceType] = Field(..., max_length=32, min_length=0)


class StatefulEngineOptions(BaseModel):
    RuleOrder_1: Optional[RuleOrder] = Field(None, alias='RuleOrder')


class StatefulRuleGroup(BaseModel):
    Override: Optional[NetworkFirewallStatefulRuleGroupOverride] = None
    Priority: Optional[PriorityNumber] = None
    ResourceId_1: Optional[ResourceId] = Field(None, alias='ResourceId')
    RuleGroupName: Optional[NetworkFirewallResourceName] = None


class StatefulRuleGroupList(RootModel[List[StatefulRuleGroup]]):
    root: List[StatefulRuleGroup]


class StatelessRuleGroupPriority(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TargetType(Enum):
    GATEWAY = 'GATEWAY'
    CARRIER_GATEWAY = 'CARRIER_GATEWAY'
    INSTANCE = 'INSTANCE'
    LOCAL_GATEWAY = 'LOCAL_GATEWAY'
    NAT_GATEWAY = 'NAT_GATEWAY'
    NETWORK_INTERFACE = 'NETWORK_INTERFACE'
    VPC_ENDPOINT = 'VPC_ENDPOINT'
    VPC_PEERING_CONNECTION = 'VPC_PEERING_CONNECTION'
    EGRESS_ONLY_INTERNET_GATEWAY = 'EGRESS_ONLY_INTERNET_GATEWAY'
    TRANSIT_GATEWAY = 'TRANSIT_GATEWAY'


class TargetViolationReason(
    RootModel[constr(pattern=r'\w+', min_length=0, max_length=256)]
):
    root: constr(pattern=r'\w+', min_length=0, max_length=256)


class TargetViolationReasons(RootModel[List[TargetViolationReason]]):
    root: List[TargetViolationReason]


class ThirdPartyFirewall(Enum):
    PALO_ALTO_NETWORKS_CLOUD_NGFW = 'PALO_ALTO_NETWORKS_CLOUD_NGFW'
    FORTIGATE_CLOUD_NATIVE_FIREWALL = 'FORTIGATE_CLOUD_NATIVE_FIREWALL'


class ThirdPartyFirewallAssociationStatus(Enum):
    ONBOARDING = 'ONBOARDING'
    ONBOARD_COMPLETE = 'ONBOARD_COMPLETE'
    OFFBOARDING = 'OFFBOARDING'
    OFFBOARD_COMPLETE = 'OFFBOARD_COMPLETE'
    NOT_EXIST = 'NOT_EXIST'


class ThirdPartyFirewallFirewallPolicy(BaseModel):
    FirewallPolicyId_1: Optional[FirewallPolicyId] = Field(
        None, alias='FirewallPolicyId'
    )
    FirewallPolicyName_1: Optional[FirewallPolicyName] = Field(
        None, alias='FirewallPolicyName'
    )


class ThirdPartyFirewallPolicy(BaseModel):
    FirewallDeploymentModel_1: Optional[FirewallDeploymentModel] = Field(
        None, alias='FirewallDeploymentModel'
    )


class TimeStamp(RootModel[datetime]):
    root: datetime


class UntagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateToken(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=1024
    )


class ViolationReason(Enum):
    WEB_ACL_MISSING_RULE_GROUP = 'WEB_ACL_MISSING_RULE_GROUP'
    RESOURCE_MISSING_WEB_ACL = 'RESOURCE_MISSING_WEB_ACL'
    RESOURCE_INCORRECT_WEB_ACL = 'RESOURCE_INCORRECT_WEB_ACL'
    RESOURCE_MISSING_SHIELD_PROTECTION = 'RESOURCE_MISSING_SHIELD_PROTECTION'
    RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION = (
        'RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION'
    )
    RESOURCE_MISSING_SECURITY_GROUP = 'RESOURCE_MISSING_SECURITY_GROUP'
    RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP = 'RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP'
    SECURITY_GROUP_UNUSED = 'SECURITY_GROUP_UNUSED'
    SECURITY_GROUP_REDUNDANT = 'SECURITY_GROUP_REDUNDANT'
    FMS_CREATED_SECURITY_GROUP_EDITED = 'FMS_CREATED_SECURITY_GROUP_EDITED'
    MISSING_FIREWALL = 'MISSING_FIREWALL'
    MISSING_FIREWALL_SUBNET_IN_AZ = 'MISSING_FIREWALL_SUBNET_IN_AZ'
    MISSING_EXPECTED_ROUTE_TABLE = 'MISSING_EXPECTED_ROUTE_TABLE'
    NETWORK_FIREWALL_POLICY_MODIFIED = 'NETWORK_FIREWALL_POLICY_MODIFIED'
    FIREWALL_SUBNET_IS_OUT_OF_SCOPE = 'FIREWALL_SUBNET_IS_OUT_OF_SCOPE'
    INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE = 'INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE'
    FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE = 'FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE'
    UNEXPECTED_FIREWALL_ROUTES = 'UNEXPECTED_FIREWALL_ROUTES'
    UNEXPECTED_TARGET_GATEWAY_ROUTES = 'UNEXPECTED_TARGET_GATEWAY_ROUTES'
    TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY = 'TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY'
    INVALID_ROUTE_CONFIGURATION = 'INVALID_ROUTE_CONFIGURATION'
    MISSING_TARGET_GATEWAY = 'MISSING_TARGET_GATEWAY'
    INTERNET_TRAFFIC_NOT_INSPECTED = 'INTERNET_TRAFFIC_NOT_INSPECTED'
    BLACK_HOLE_ROUTE_DETECTED = 'BLACK_HOLE_ROUTE_DETECTED'
    BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET = (
        'BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET'
    )
    RESOURCE_MISSING_DNS_FIREWALL = 'RESOURCE_MISSING_DNS_FIREWALL'
    ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT = 'ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT'
    FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT = 'FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT'


class ViolationTarget(RootModel[constr(pattern=r'.*', min_length=0, max_length=1024)]):
    root: constr(pattern=r'.*', min_length=0, max_length=1024)


class XAmzTarget(Enum):
    AWSFMS_20180101_AssociateAdminAccount = 'AWSFMS_20180101.AssociateAdminAccount'


class XAmzTarget1(Enum):
    AWSFMS_20180101_AssociateThirdPartyFirewall = (
        'AWSFMS_20180101.AssociateThirdPartyFirewall'
    )


class XAmzTarget2(Enum):
    AWSFMS_20180101_BatchAssociateResource = 'AWSFMS_20180101.BatchAssociateResource'


class XAmzTarget3(Enum):
    AWSFMS_20180101_BatchDisassociateResource = (
        'AWSFMS_20180101.BatchDisassociateResource'
    )


class XAmzTarget4(Enum):
    AWSFMS_20180101_DeleteAppsList = 'AWSFMS_20180101.DeleteAppsList'


class XAmzTarget5(Enum):
    AWSFMS_20180101_DeleteNotificationChannel = (
        'AWSFMS_20180101.DeleteNotificationChannel'
    )


class XAmzTarget6(Enum):
    AWSFMS_20180101_DeletePolicy = 'AWSFMS_20180101.DeletePolicy'


class XAmzTarget7(Enum):
    AWSFMS_20180101_DeleteProtocolsList = 'AWSFMS_20180101.DeleteProtocolsList'


class XAmzTarget8(Enum):
    AWSFMS_20180101_DeleteResourceSet = 'AWSFMS_20180101.DeleteResourceSet'


class XAmzTarget9(Enum):
    AWSFMS_20180101_DisassociateAdminAccount = (
        'AWSFMS_20180101.DisassociateAdminAccount'
    )


class XAmzTarget10(Enum):
    AWSFMS_20180101_DisassociateThirdPartyFirewall = (
        'AWSFMS_20180101.DisassociateThirdPartyFirewall'
    )


class XAmzTarget11(Enum):
    AWSFMS_20180101_GetAdminAccount = 'AWSFMS_20180101.GetAdminAccount'


class XAmzTarget12(Enum):
    AWSFMS_20180101_GetAdminScope = 'AWSFMS_20180101.GetAdminScope'


class XAmzTarget13(Enum):
    AWSFMS_20180101_GetAppsList = 'AWSFMS_20180101.GetAppsList'


class XAmzTarget14(Enum):
    AWSFMS_20180101_GetComplianceDetail = 'AWSFMS_20180101.GetComplianceDetail'


class XAmzTarget15(Enum):
    AWSFMS_20180101_GetNotificationChannel = 'AWSFMS_20180101.GetNotificationChannel'


class XAmzTarget16(Enum):
    AWSFMS_20180101_GetPolicy = 'AWSFMS_20180101.GetPolicy'


class XAmzTarget17(Enum):
    AWSFMS_20180101_GetProtectionStatus = 'AWSFMS_20180101.GetProtectionStatus'


class XAmzTarget18(Enum):
    AWSFMS_20180101_GetProtocolsList = 'AWSFMS_20180101.GetProtocolsList'


class XAmzTarget19(Enum):
    AWSFMS_20180101_GetResourceSet = 'AWSFMS_20180101.GetResourceSet'


class XAmzTarget20(Enum):
    AWSFMS_20180101_GetThirdPartyFirewallAssociationStatus = (
        'AWSFMS_20180101.GetThirdPartyFirewallAssociationStatus'
    )


class XAmzTarget21(Enum):
    AWSFMS_20180101_GetViolationDetails = 'AWSFMS_20180101.GetViolationDetails'


class XAmzTarget22(Enum):
    AWSFMS_20180101_ListAdminAccountsForOrganization = (
        'AWSFMS_20180101.ListAdminAccountsForOrganization'
    )


class XAmzTarget23(Enum):
    AWSFMS_20180101_ListAdminsManagingAccount = (
        'AWSFMS_20180101.ListAdminsManagingAccount'
    )


class XAmzTarget24(Enum):
    AWSFMS_20180101_ListAppsLists = 'AWSFMS_20180101.ListAppsLists'


class XAmzTarget25(Enum):
    AWSFMS_20180101_ListComplianceStatus = 'AWSFMS_20180101.ListComplianceStatus'


class XAmzTarget26(Enum):
    AWSFMS_20180101_ListDiscoveredResources = 'AWSFMS_20180101.ListDiscoveredResources'


class XAmzTarget27(Enum):
    AWSFMS_20180101_ListMemberAccounts = 'AWSFMS_20180101.ListMemberAccounts'


class XAmzTarget28(Enum):
    AWSFMS_20180101_ListPolicies = 'AWSFMS_20180101.ListPolicies'


class XAmzTarget29(Enum):
    AWSFMS_20180101_ListProtocolsLists = 'AWSFMS_20180101.ListProtocolsLists'


class XAmzTarget30(Enum):
    AWSFMS_20180101_ListResourceSetResources = (
        'AWSFMS_20180101.ListResourceSetResources'
    )


class XAmzTarget31(Enum):
    AWSFMS_20180101_ListResourceSets = 'AWSFMS_20180101.ListResourceSets'


class XAmzTarget32(Enum):
    AWSFMS_20180101_ListTagsForResource = 'AWSFMS_20180101.ListTagsForResource'


class XAmzTarget33(Enum):
    AWSFMS_20180101_ListThirdPartyFirewallFirewallPolicies = (
        'AWSFMS_20180101.ListThirdPartyFirewallFirewallPolicies'
    )


class XAmzTarget34(Enum):
    AWSFMS_20180101_PutAdminAccount = 'AWSFMS_20180101.PutAdminAccount'


class XAmzTarget35(Enum):
    AWSFMS_20180101_PutAppsList = 'AWSFMS_20180101.PutAppsList'


class XAmzTarget36(Enum):
    AWSFMS_20180101_PutNotificationChannel = 'AWSFMS_20180101.PutNotificationChannel'


class XAmzTarget37(Enum):
    AWSFMS_20180101_PutPolicy = 'AWSFMS_20180101.PutPolicy'


class XAmzTarget38(Enum):
    AWSFMS_20180101_PutProtocolsList = 'AWSFMS_20180101.PutProtocolsList'


class XAmzTarget39(Enum):
    AWSFMS_20180101_PutResourceSet = 'AWSFMS_20180101.PutResourceSet'


class XAmzTarget40(Enum):
    AWSFMS_20180101_TagResource = 'AWSFMS_20180101.TagResource'


class XAmzTarget41(Enum):
    AWSFMS_20180101_UntagResource = 'AWSFMS_20180101.UntagResource'


class AccountScope(BaseModel):
    Accounts: Optional[AccountIdList] = None
    AllAccountsEnabled: Optional[Boolean] = None
    ExcludeSpecifiedAccounts: Optional[Boolean] = None


class ActionTarget(BaseModel):
    Description: Optional[LengthBoundedString] = None
    ResourceId_1: Optional[ResourceId] = Field(None, alias='ResourceId')


class AdminAccountSummary(BaseModel):
    AdminAccount: Optional[AWSAccountId] = None
    DefaultAdmin: Optional[Boolean] = None
    Status: Optional[OrganizationStatus] = None


class AdminAccountSummaryList(RootModel[List[AdminAccountSummary]]):
    root: List[AdminAccountSummary]


class App(BaseModel):
    AppName: ResourceName
    Port: IPPortNumber
    Protocol_1: Protocol = Field(..., alias='Protocol')


class AppsList(RootModel[List[App]]):
    root: List[App]


class AppsListDataSummary(BaseModel):
    AppsList_1: Optional[AppsList] = Field(None, alias='AppsList')
    ListArn: Optional[ResourceArn] = None
    ListId_1: Optional[ListId] = Field(None, alias='ListId')
    ListName: Optional[ResourceName] = None


class AppsListsData(RootModel[List[AppsListDataSummary]]):
    root: List[AppsListDataSummary]


class AssociateThirdPartyFirewallRequest(BaseModel):
    ThirdPartyFirewall_1: ThirdPartyFirewall = Field(..., alias='ThirdPartyFirewall')


class AssociateThirdPartyFirewallResponse(BaseModel):
    ThirdPartyFirewallStatus: Optional[ThirdPartyFirewallAssociationStatus] = None


class AwsEc2NetworkInterfaceViolation(BaseModel):
    ViolatingSecurityGroups: Optional[ResourceIdList] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')


class AwsEc2NetworkInterfaceViolations(
    RootModel[List[AwsEc2NetworkInterfaceViolation]]
):
    root: List[AwsEc2NetworkInterfaceViolation]


class BatchAssociateResourceRequest(BaseModel):
    Items: IdentifierList
    ResourceSetIdentifier: Identifier


class BatchDisassociateResourceRequest(BaseModel):
    Items: IdentifierList
    ResourceSetIdentifier: Identifier


class ComplianceViolatorMetadata(RootModel[Optional[Dict[str, LengthBoundedString]]]):
    root: Optional[Dict[str, LengthBoundedString]] = None


class DeleteAppsListRequest(BaseModel):
    ListId_1: ListId = Field(..., alias='ListId')


class DeletePolicyRequest(BaseModel):
    DeleteAllPolicyResources: Optional[Boolean] = None
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')


class DeleteProtocolsListRequest(BaseModel):
    ListId_1: ListId = Field(..., alias='ListId')


class DisassociateThirdPartyFirewallRequest(BaseModel):
    ThirdPartyFirewall_1: ThirdPartyFirewall = Field(..., alias='ThirdPartyFirewall')


class DisassociateThirdPartyFirewallResponse(BaseModel):
    ThirdPartyFirewallStatus: Optional[ThirdPartyFirewallAssociationStatus] = None


class DiscoveredResource(BaseModel):
    AccountId: Optional[AWSAccountId] = None
    Name: Optional[ResourceName] = None
    Type: Optional[ResourceType] = None
    URI: Optional[Identifier] = None


class DiscoveredResourceList(RootModel[List[DiscoveredResource]]):
    root: List[DiscoveredResource]


class DnsDuplicateRuleGroupViolation(BaseModel):
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')
    ViolationTargetDescription: Optional[LengthBoundedString] = None


class DnsRuleGroupLimitExceededViolation(BaseModel):
    NumberOfRuleGroupsAlreadyAssociated: Optional[BasicInteger] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')
    ViolationTargetDescription: Optional[LengthBoundedString] = None


class DnsRuleGroupPriorities(RootModel[List[DnsRuleGroupPriority]]):
    root: List[DnsRuleGroupPriority]


class DnsRuleGroupPriorityConflictViolation(BaseModel):
    ConflictingPolicyId: Optional[PolicyId] = None
    ConflictingPriority: Optional[DnsRuleGroupPriority] = None
    UnavailablePriorities: Optional[DnsRuleGroupPriorities] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')
    ViolationTargetDescription: Optional[LengthBoundedString] = None


class EC2AssociateRouteTableAction(BaseModel):
    Description: Optional[LengthBoundedString] = None
    GatewayId: Optional[ActionTarget] = None
    RouteTableId: ActionTarget
    SubnetId: Optional[ActionTarget] = None


class EC2CopyRouteTableAction(BaseModel):
    Description: Optional[LengthBoundedString] = None
    RouteTableId: ActionTarget
    VpcId: ActionTarget


class EC2CreateRouteAction(BaseModel):
    Description: Optional[LengthBoundedString] = None
    DestinationCidrBlock: Optional[CIDR] = None
    DestinationIpv6CidrBlock: Optional[CIDR] = None
    DestinationPrefixListId: Optional[ResourceId] = None
    GatewayId: Optional[ActionTarget] = None
    RouteTableId: ActionTarget
    VpcEndpointId: Optional[ActionTarget] = None


class EC2CreateRouteTableAction(BaseModel):
    Description: Optional[LengthBoundedString] = None
    VpcId: ActionTarget


class EC2DeleteRouteAction(BaseModel):
    Description: Optional[LengthBoundedString] = None
    DestinationCidrBlock: Optional[CIDR] = None
    DestinationIpv6CidrBlock: Optional[CIDR] = None
    DestinationPrefixListId: Optional[ResourceId] = None
    RouteTableId: ActionTarget


class EC2ReplaceRouteAction(BaseModel):
    Description: Optional[LengthBoundedString] = None
    DestinationCidrBlock: Optional[CIDR] = None
    DestinationIpv6CidrBlock: Optional[CIDR] = None
    DestinationPrefixListId: Optional[ResourceId] = None
    GatewayId: Optional[ActionTarget] = None
    RouteTableId: ActionTarget


class EC2ReplaceRouteTableAssociationAction(BaseModel):
    AssociationId: ActionTarget
    Description: Optional[LengthBoundedString] = None
    RouteTableId: ActionTarget


class EvaluationResult(BaseModel):
    ComplianceStatus: Optional[PolicyComplianceStatusType] = None
    EvaluationLimitExceeded: Optional[Boolean] = None
    ViolatorCount: Optional[ResourceCount] = None


class EvaluationResults(RootModel[List[EvaluationResult]]):
    root: List[EvaluationResult]


class ExpectedRoute(BaseModel):
    AllowedTargets: Optional[LengthBoundedStringList] = None
    ContributingSubnets: Optional[ResourceIdList] = None
    IpV4Cidr: Optional[CIDR] = None
    IpV6Cidr: Optional[CIDR] = None
    PrefixListId: Optional[CIDR] = None
    RouteTableId: Optional[ResourceId] = None


class ExpectedRoutes(RootModel[List[ExpectedRoute]]):
    root: List[ExpectedRoute]


class FMSPolicyUpdateFirewallCreationConfigAction(BaseModel):
    Description: Optional[LengthBoundedString] = None
    FirewallCreationConfig: Optional[ManagedServiceData] = None


class FailedItem(BaseModel):
    Reason: Optional[FailedItemReason] = None
    URI: Optional[Identifier] = None


class FailedItemList(RootModel[List[FailedItem]]):
    root: List[FailedItem]


class FirewallSubnetIsOutOfScopeViolation(BaseModel):
    FirewallSubnetId: Optional[ResourceId] = None
    SubnetAvailabilityZone: Optional[LengthBoundedString] = None
    SubnetAvailabilityZoneId: Optional[LengthBoundedString] = None
    VpcEndpointId: Optional[ResourceId] = None
    VpcId: Optional[ResourceId] = None


class FirewallSubnetMissingVPCEndpointViolation(BaseModel):
    FirewallSubnetId: Optional[ResourceId] = None
    SubnetAvailabilityZone: Optional[LengthBoundedString] = None
    SubnetAvailabilityZoneId: Optional[LengthBoundedString] = None
    VpcId: Optional[ResourceId] = None


class GetAppsListRequest(BaseModel):
    DefaultList: Optional[Boolean] = None
    ListId_1: ListId = Field(..., alias='ListId')


class GetComplianceDetailRequest(BaseModel):
    MemberAccount: AWSAccountId
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')


class GetNotificationChannelResponse(BaseModel):
    SnsRoleName: Optional[ResourceArn] = None
    SnsTopicArn: Optional[ResourceArn] = None


class GetPolicyRequest(BaseModel):
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')


class GetProtectionStatusRequest(BaseModel):
    EndTime: Optional[TimeStamp] = None
    MaxResults: Optional[PaginationMaxResults] = None
    MemberAccountId: Optional[AWSAccountId] = None
    NextToken: Optional[PaginationToken] = None
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')
    StartTime: Optional[TimeStamp] = None


class GetProtectionStatusResponse(BaseModel):
    AdminAccountId: Optional[AWSAccountId] = None
    Data: Optional[ProtectionData] = None
    NextToken: Optional[PaginationToken] = None
    ServiceType: Optional[SecurityServiceType] = None


class GetProtocolsListRequest(BaseModel):
    DefaultList: Optional[Boolean] = None
    ListId_1: ListId = Field(..., alias='ListId')


class GetThirdPartyFirewallAssociationStatusRequest(BaseModel):
    ThirdPartyFirewall_1: ThirdPartyFirewall = Field(..., alias='ThirdPartyFirewall')


class GetThirdPartyFirewallAssociationStatusResponse(BaseModel):
    MarketplaceOnboardingStatus: Optional[MarketplaceSubscriptionOnboardingStatus] = (
        None
    )
    ThirdPartyFirewallStatus: Optional[ThirdPartyFirewallAssociationStatus] = None


class GetViolationDetailsRequest(BaseModel):
    MemberAccount: AWSAccountId
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')


class ListAdminAccountsForOrganizationRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None


class ListAdminAccountsForOrganizationResponse(BaseModel):
    AdminAccounts: Optional[AdminAccountSummaryList] = None
    NextToken: Optional[PaginationToken] = None


class ListAdminsManagingAccountRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None


class ListAdminsManagingAccountResponse(BaseModel):
    AdminAccounts: Optional[AccountIdList] = None
    NextToken: Optional[PaginationToken] = None


class ListAppsListsRequest(BaseModel):
    DefaultLists: Optional[Boolean] = None
    MaxResults: PaginationMaxResults
    NextToken: Optional[PaginationToken] = None


class ListAppsListsResponse(BaseModel):
    AppsLists: Optional[AppsListsData] = None
    NextToken: Optional[PaginationToken] = None


class ListComplianceStatusRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')


class ListDiscoveredResourcesRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    MemberAccountIds: AWSAccountIdList
    NextToken: Optional[PaginationToken] = None
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')


class ListDiscoveredResourcesResponse(BaseModel):
    Items: Optional[DiscoveredResourceList] = None
    NextToken: Optional[PaginationToken] = None


class ListMemberAccountsRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None


class ListMemberAccountsResponse(BaseModel):
    MemberAccounts_1: Optional[MemberAccounts] = Field(None, alias='MemberAccounts')
    NextToken: Optional[PaginationToken] = None


class ListPoliciesRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None


class ListProtocolsListsRequest(BaseModel):
    DefaultLists: Optional[Boolean] = None
    MaxResults: PaginationMaxResults
    NextToken: Optional[PaginationToken] = None


class ListResourceSetResourcesRequest(BaseModel):
    Identifier: ResourceId
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None


class ListResourceSetResourcesResponse(BaseModel):
    Items: ResourceList
    NextToken: Optional[PaginationToken] = None


class ListResourceSetsRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class ListThirdPartyFirewallFirewallPoliciesRequest(BaseModel):
    MaxResults: PaginationMaxResults
    NextToken: Optional[PaginationToken] = None
    ThirdPartyFirewall_1: ThirdPartyFirewall = Field(..., alias='ThirdPartyFirewall')


class NetworkFirewallMissingExpectedRTViolation(BaseModel):
    AvailabilityZone: Optional[LengthBoundedString] = None
    CurrentRouteTable: Optional[ResourceId] = None
    ExpectedRouteTable: Optional[ResourceId] = None
    VPC: Optional[ResourceId] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')


class NetworkFirewallMissingExpectedRoutesViolation(BaseModel):
    ExpectedRoutes_1: Optional[ExpectedRoutes] = Field(None, alias='ExpectedRoutes')
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')
    VpcId: Optional[ResourceId] = None


class NetworkFirewallMissingFirewallViolation(BaseModel):
    AvailabilityZone: Optional[LengthBoundedString] = None
    TargetViolationReason_1: Optional[TargetViolationReason] = Field(
        None, alias='TargetViolationReason'
    )
    VPC: Optional[ResourceId] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')


class NetworkFirewallMissingSubnetViolation(BaseModel):
    AvailabilityZone: Optional[LengthBoundedString] = None
    TargetViolationReason_1: Optional[TargetViolationReason] = Field(
        None, alias='TargetViolationReason'
    )
    VPC: Optional[ResourceId] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')


class PartialMatch(BaseModel):
    Reference: Optional[ReferenceRule] = None
    TargetViolationReasons_1: Optional[TargetViolationReasons] = Field(
        None, alias='TargetViolationReasons'
    )


class PartialMatches(RootModel[List[PartialMatch]]):
    root: List[PartialMatch]


class PolicyComplianceStatus(BaseModel):
    EvaluationResults_1: Optional[EvaluationResults] = Field(
        None, alias='EvaluationResults'
    )
    IssueInfoMap_1: Optional[IssueInfoMap] = Field(None, alias='IssueInfoMap')
    LastUpdated: Optional[TimeStamp] = None
    MemberAccount: Optional[AWSAccountId] = None
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')
    PolicyName: Optional[ResourceName] = None
    PolicyOwner: Optional[AWSAccountId] = None


class PolicyComplianceStatusList(RootModel[List[PolicyComplianceStatus]]):
    root: List[PolicyComplianceStatus]


class PolicyOption(BaseModel):
    NetworkFirewallPolicy_1: Optional[NetworkFirewallPolicy] = Field(
        None, alias='NetworkFirewallPolicy'
    )
    ThirdPartyFirewallPolicy_1: Optional[ThirdPartyFirewallPolicy] = Field(
        None, alias='ThirdPartyFirewallPolicy'
    )


class PolicySummary(BaseModel):
    DeleteUnusedFMManagedResources: Optional[Boolean] = None
    PolicyArn: Optional[ResourceArn] = None
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')
    PolicyName: Optional[ResourceName] = None
    PolicyStatus: Optional[CustomerPolicyStatus] = None
    RemediationEnabled: Optional[Boolean] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    SecurityServiceType_1: Optional[SecurityServiceType] = Field(
        None, alias='SecurityServiceType'
    )


class PolicySummaryList(RootModel[List[PolicySummary]]):
    root: List[PolicySummary]


class PolicyTypeScope(BaseModel):
    AllPolicyTypesEnabled: Optional[Boolean] = None
    PolicyTypes: Optional[SecurityServiceTypeList] = None


class PreviousAppsList(RootModel[Optional[Dict[str, AppsList]]]):
    root: Optional[Dict[str, AppsList]] = None


class PreviousProtocolsList(RootModel[Optional[Dict[str, ProtocolsList]]]):
    root: Optional[Dict[str, ProtocolsList]] = None


class ProtocolsListData(BaseModel):
    CreateTime: Optional[TimeStamp] = None
    LastUpdateTime: Optional[TimeStamp] = None
    ListId_1: Optional[ListId] = Field(None, alias='ListId')
    ListName: ResourceName
    ListUpdateToken: Optional[UpdateToken] = None
    PreviousProtocolsList_1: Optional[PreviousProtocolsList] = Field(
        None, alias='PreviousProtocolsList'
    )
    ProtocolsList_1: ProtocolsList = Field(..., alias='ProtocolsList')


class ProtocolsListDataSummary(BaseModel):
    ListArn: Optional[ResourceArn] = None
    ListId_1: Optional[ListId] = Field(None, alias='ListId')
    ListName: Optional[ResourceName] = None
    ProtocolsList_1: Optional[ProtocolsList] = Field(None, alias='ProtocolsList')


class ProtocolsListsData(RootModel[List[ProtocolsListDataSummary]]):
    root: List[ProtocolsListDataSummary]


class PutNotificationChannelRequest(BaseModel):
    SnsRoleName: ResourceArn
    SnsTopicArn: ResourceArn


class PutProtocolsListResponse(BaseModel):
    ProtocolsList: Optional[ProtocolsListData] = None
    ProtocolsListArn: Optional[ResourceArn] = None


class RemediationAction(BaseModel):
    Description: Optional[LengthBoundedString] = None
    EC2AssociateRouteTableAction_1: Optional[EC2AssociateRouteTableAction] = Field(
        None, alias='EC2AssociateRouteTableAction'
    )
    EC2CopyRouteTableAction_1: Optional[EC2CopyRouteTableAction] = Field(
        None, alias='EC2CopyRouteTableAction'
    )
    EC2CreateRouteAction_1: Optional[EC2CreateRouteAction] = Field(
        None, alias='EC2CreateRouteAction'
    )
    EC2CreateRouteTableAction_1: Optional[EC2CreateRouteTableAction] = Field(
        None, alias='EC2CreateRouteTableAction'
    )
    EC2DeleteRouteAction_1: Optional[EC2DeleteRouteAction] = Field(
        None, alias='EC2DeleteRouteAction'
    )
    EC2ReplaceRouteAction_1: Optional[EC2ReplaceRouteAction] = Field(
        None, alias='EC2ReplaceRouteAction'
    )
    EC2ReplaceRouteTableAssociationAction_1: Optional[
        EC2ReplaceRouteTableAssociationAction
    ] = Field(None, alias='EC2ReplaceRouteTableAssociationAction')
    FMSPolicyUpdateFirewallCreationConfigAction_1: Optional[
        FMSPolicyUpdateFirewallCreationConfigAction
    ] = Field(None, alias='FMSPolicyUpdateFirewallCreationConfigAction')


class RemediationActionWithOrder(BaseModel):
    Order: Optional[BasicInteger] = None
    RemediationAction_1: Optional[RemediationAction] = Field(
        None, alias='RemediationAction'
    )


class ResourceSet(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id: Optional[Base62Id] = None
    LastUpdateTime: Optional[TimeStamp] = None
    Name_1: Name = Field(..., alias='Name')
    ResourceSetStatus_1: Optional[ResourceSetStatus] = Field(
        None, alias='ResourceSetStatus'
    )
    ResourceTypeList_1: ResourceTypeList = Field(..., alias='ResourceTypeList')
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class ResourceSetSummary(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id: Optional[Base62Id] = None
    LastUpdateTime: Optional[TimeStamp] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    ResourceSetStatus_1: Optional[ResourceSetStatus] = Field(
        None, alias='ResourceSetStatus'
    )


class ResourceSetSummaryList(RootModel[List[ResourceSetSummary]]):
    root: List[ResourceSetSummary]


class ResourceTag(BaseModel):
    Key: ResourceTagKey
    Value: Optional[ResourceTagValue] = None


class ResourceTags(RootModel[List[ResourceTag]]):
    root: List[ResourceTag] = Field(..., max_length=8, min_length=0)


class Route(BaseModel):
    Destination: Optional[LengthBoundedString] = None
    DestinationType_1: Optional[DestinationType] = Field(None, alias='DestinationType')
    Target: Optional[LengthBoundedString] = None
    TargetType_1: Optional[TargetType] = Field(None, alias='TargetType')


class Routes(RootModel[List[Route]]):
    root: List[Route]


class SecurityGroupRemediationAction(BaseModel):
    Description: Optional[RemediationActionDescription] = None
    IsDefaultAction: Optional[Boolean] = None
    RemediationActionType_1: Optional[RemediationActionType] = Field(
        None, alias='RemediationActionType'
    )
    RemediationResult: Optional[SecurityGroupRuleDescription] = None


class SecurityGroupRemediationActions(RootModel[List[SecurityGroupRemediationAction]]):
    root: List[SecurityGroupRemediationAction]


class SecurityServicePolicyData(BaseModel):
    ManagedServiceData_1: Optional[ManagedServiceData] = Field(
        None, alias='ManagedServiceData'
    )
    PolicyOption_1: Optional[PolicyOption] = Field(None, alias='PolicyOption')
    Type: SecurityServiceType


class StatelessRuleGroup(BaseModel):
    Priority: Optional[StatelessRuleGroupPriority] = None
    ResourceId_1: Optional[ResourceId] = Field(None, alias='ResourceId')
    RuleGroupName: Optional[NetworkFirewallResourceName] = None


class StatelessRuleGroupList(RootModel[List[StatelessRuleGroup]]):
    root: List[StatelessRuleGroup]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    TagList_1: TagList = Field(..., alias='TagList')


class ThirdPartyFirewallFirewallPolicies(
    RootModel[List[ThirdPartyFirewallFirewallPolicy]]
):
    root: List[ThirdPartyFirewallFirewallPolicy]


class ThirdPartyFirewallMissingExpectedRouteTableViolation(BaseModel):
    AvailabilityZone: Optional[LengthBoundedString] = None
    CurrentRouteTable: Optional[ResourceId] = None
    ExpectedRouteTable: Optional[ResourceId] = None
    VPC: Optional[ResourceId] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')


class ThirdPartyFirewallMissingFirewallViolation(BaseModel):
    AvailabilityZone: Optional[LengthBoundedString] = None
    TargetViolationReason_1: Optional[TargetViolationReason] = Field(
        None, alias='TargetViolationReason'
    )
    VPC: Optional[ResourceId] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')


class ThirdPartyFirewallMissingSubnetViolation(BaseModel):
    AvailabilityZone: Optional[LengthBoundedString] = None
    TargetViolationReason_1: Optional[TargetViolationReason] = Field(
        None, alias='TargetViolationReason'
    )
    VPC: Optional[ResourceId] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')


class AdminScope(BaseModel):
    AccountScope_1: Optional[AccountScope] = Field(None, alias='AccountScope')
    OrganizationalUnitScope_1: Optional[OrganizationalUnitScope] = Field(
        None, alias='OrganizationalUnitScope'
    )
    PolicyTypeScope_1: Optional[PolicyTypeScope] = Field(None, alias='PolicyTypeScope')
    RegionScope_1: Optional[RegionScope] = Field(None, alias='RegionScope')


class AppsListData(BaseModel):
    AppsList_1: AppsList = Field(..., alias='AppsList')
    CreateTime: Optional[TimeStamp] = None
    LastUpdateTime: Optional[TimeStamp] = None
    ListId_1: Optional[ListId] = Field(None, alias='ListId')
    ListName: ResourceName
    ListUpdateToken: Optional[UpdateToken] = None
    PreviousAppsList_1: Optional[PreviousAppsList] = Field(
        None, alias='PreviousAppsList'
    )


class AwsEc2InstanceViolation(BaseModel):
    AwsEc2NetworkInterfaceViolations_1: Optional[AwsEc2NetworkInterfaceViolations] = (
        Field(None, alias='AwsEc2NetworkInterfaceViolations')
    )
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')


class AwsVPCSecurityGroupViolation(BaseModel):
    PartialMatches_1: Optional[PartialMatches] = Field(None, alias='PartialMatches')
    PossibleSecurityGroupRemediationActions: Optional[
        SecurityGroupRemediationActions
    ] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')
    ViolationTargetDescription: Optional[LengthBoundedString] = None


class BatchAssociateResourceResponse(BaseModel):
    FailedItems: FailedItemList
    ResourceSetIdentifier: Identifier


class BatchDisassociateResourceResponse(BaseModel):
    FailedItems: FailedItemList
    ResourceSetIdentifier: Identifier


class ComplianceViolator(BaseModel):
    Metadata: Optional[ComplianceViolatorMetadata] = None
    ResourceId_1: Optional[ResourceId] = Field(None, alias='ResourceId')
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    ViolationReason_1: Optional[ViolationReason] = Field(None, alias='ViolationReason')


class ComplianceViolators(RootModel[List[ComplianceViolator]]):
    root: List[ComplianceViolator]


class GetAdminScopeResponse(BaseModel):
    AdminScope_1: Optional[AdminScope] = Field(None, alias='AdminScope')
    Status: Optional[OrganizationStatus] = None


class GetAppsListResponse(BaseModel):
    AppsList: Optional[AppsListData] = None
    AppsListArn: Optional[ResourceArn] = None


class GetProtocolsListResponse(BaseModel):
    ProtocolsList: Optional[ProtocolsListData] = None
    ProtocolsListArn: Optional[ResourceArn] = None


class GetResourceSetResponse(BaseModel):
    ResourceSet_1: ResourceSet = Field(..., alias='ResourceSet')
    ResourceSetArn: ResourceArn


class ListComplianceStatusResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    PolicyComplianceStatusList_1: Optional[PolicyComplianceStatusList] = Field(
        None, alias='PolicyComplianceStatusList'
    )


class ListPoliciesResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    PolicyList: Optional[PolicySummaryList] = None


class ListProtocolsListsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    ProtocolsLists: Optional[ProtocolsListsData] = None


class ListResourceSetsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    ResourceSets: Optional[ResourceSetSummaryList] = None


class ListTagsForResourceResponse(BaseModel):
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class ListThirdPartyFirewallFirewallPoliciesResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    ThirdPartyFirewallFirewallPolicies_1: Optional[
        ThirdPartyFirewallFirewallPolicies
    ] = Field(None, alias='ThirdPartyFirewallFirewallPolicies')


class NetworkFirewallBlackHoleRouteDetectedViolation(BaseModel):
    RouteTableId: Optional[ResourceId] = None
    ViolatingRoutes: Optional[Routes] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')
    VpcId: Optional[ResourceId] = None


class NetworkFirewallInternetTrafficNotInspectedViolation(BaseModel):
    ActualFirewallSubnetRoutes: Optional[Routes] = None
    ActualInternetGatewayRoutes: Optional[Routes] = None
    CurrentFirewallSubnetRouteTable: Optional[ResourceId] = None
    CurrentInternetGatewayRouteTable: Optional[ResourceId] = None
    ExpectedFirewallEndpoint: Optional[ResourceId] = None
    ExpectedFirewallSubnetRoutes: Optional[ExpectedRoutes] = None
    ExpectedInternetGatewayRoutes: Optional[ExpectedRoutes] = None
    FirewallSubnetId: Optional[ResourceId] = None
    InternetGatewayId: Optional[ResourceId] = None
    IsRouteTableUsedInDifferentAZ: Optional[Boolean] = None
    RouteTableId: Optional[ResourceId] = None
    SubnetAvailabilityZone: Optional[LengthBoundedString] = None
    SubnetId: Optional[ResourceId] = None
    ViolatingRoutes: Optional[Routes] = None
    VpcId: Optional[ResourceId] = None


class NetworkFirewallInvalidRouteConfigurationViolation(BaseModel):
    ActualFirewallEndpoint: Optional[ResourceId] = None
    ActualFirewallSubnetId: Optional[ResourceId] = None
    ActualFirewallSubnetRoutes: Optional[Routes] = None
    ActualInternetGatewayRoutes: Optional[Routes] = None
    AffectedSubnets: Optional[ResourceIdList] = None
    CurrentFirewallSubnetRouteTable: Optional[ResourceId] = None
    CurrentInternetGatewayRouteTable: Optional[ResourceId] = None
    ExpectedFirewallEndpoint: Optional[ResourceId] = None
    ExpectedFirewallSubnetId: Optional[ResourceId] = None
    ExpectedFirewallSubnetRoutes: Optional[ExpectedRoutes] = None
    ExpectedInternetGatewayRoutes: Optional[ExpectedRoutes] = None
    InternetGatewayId: Optional[ResourceId] = None
    IsRouteTableUsedInDifferentAZ: Optional[Boolean] = None
    RouteTableId: Optional[ResourceId] = None
    ViolatingRoute: Optional[Route] = None
    VpcId: Optional[ResourceId] = None


class NetworkFirewallPolicyDescription(BaseModel):
    StatefulDefaultActions: Optional[NetworkFirewallActionList] = None
    StatefulEngineOptions_1: Optional[StatefulEngineOptions] = Field(
        None, alias='StatefulEngineOptions'
    )
    StatefulRuleGroups: Optional[StatefulRuleGroupList] = None
    StatelessCustomActions: Optional[NetworkFirewallActionList] = None
    StatelessDefaultActions: Optional[NetworkFirewallActionList] = None
    StatelessFragmentDefaultActions: Optional[NetworkFirewallActionList] = None
    StatelessRuleGroups: Optional[StatelessRuleGroupList] = None


class NetworkFirewallPolicyModifiedViolation(BaseModel):
    CurrentPolicyDescription: Optional[NetworkFirewallPolicyDescription] = None
    ExpectedPolicyDescription: Optional[NetworkFirewallPolicyDescription] = None
    ViolationTarget_1: Optional[ViolationTarget] = Field(None, alias='ViolationTarget')


class NetworkFirewallUnexpectedFirewallRoutesViolation(BaseModel):
    FirewallEndpoint: Optional[ResourceId] = None
    FirewallSubnetId: Optional[ResourceId] = None
    RouteTableId: Optional[ResourceId] = None
    ViolatingRoutes: Optional[Routes] = None
    VpcId: Optional[ResourceId] = None


class NetworkFirewallUnexpectedGatewayRoutesViolation(BaseModel):
    GatewayId: Optional[ResourceId] = None
    RouteTableId: Optional[ResourceId] = None
    ViolatingRoutes: Optional[Routes] = None
    VpcId: Optional[ResourceId] = None


class OrderedRemediationActions(RootModel[List[RemediationActionWithOrder]]):
    root: List[RemediationActionWithOrder]


class Policy(BaseModel):
    DeleteUnusedFMManagedResources: Optional[Boolean] = None
    ExcludeMap: Optional[CustomerPolicyScopeMap] = None
    ExcludeResourceTags: Boolean
    IncludeMap: Optional[CustomerPolicyScopeMap] = None
    PolicyDescription: Optional[ResourceDescription] = None
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')
    PolicyName: ResourceName
    PolicyStatus: Optional[CustomerPolicyStatus] = None
    PolicyUpdateToken_1: Optional[PolicyUpdateToken] = Field(
        None, alias='PolicyUpdateToken'
    )
    RemediationEnabled: Boolean
    ResourceSetIds_1: Optional[ResourceSetIds] = Field(None, alias='ResourceSetIds')
    ResourceTags_1: Optional[ResourceTags] = Field(None, alias='ResourceTags')
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')
    ResourceTypeList_1: Optional[ResourceTypeList] = Field(
        None, alias='ResourceTypeList'
    )
    SecurityServicePolicyData_1: SecurityServicePolicyData = Field(
        ..., alias='SecurityServicePolicyData'
    )


class PolicyComplianceDetail(BaseModel):
    EvaluationLimitExceeded: Optional[Boolean] = None
    ExpiredAt: Optional[TimeStamp] = None
    IssueInfoMap_1: Optional[IssueInfoMap] = Field(None, alias='IssueInfoMap')
    MemberAccount: Optional[AWSAccountId] = None
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')
    PolicyOwner: Optional[AWSAccountId] = None
    Violators: Optional[ComplianceViolators] = None


class PossibleRemediationAction(BaseModel):
    Description: Optional[LengthBoundedString] = None
    IsDefaultAction: Optional[Boolean] = None
    OrderedRemediationActions_1: OrderedRemediationActions = Field(
        ..., alias='OrderedRemediationActions'
    )


class PossibleRemediationActionList(RootModel[List[PossibleRemediationAction]]):
    root: List[PossibleRemediationAction]


class PossibleRemediationActions(BaseModel):
    Actions: Optional[PossibleRemediationActionList] = None
    Description: Optional[LengthBoundedString] = None


class PutAdminAccountRequest(BaseModel):
    AdminAccount: AWSAccountId
    AdminScope_1: Optional[AdminScope] = Field(None, alias='AdminScope')


class PutAppsListRequest(BaseModel):
    AppsList: AppsListData
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class PutAppsListResponse(BaseModel):
    AppsList: Optional[AppsListData] = None
    AppsListArn: Optional[ResourceArn] = None


class PutPolicyRequest(BaseModel):
    Policy_1: Policy = Field(..., alias='Policy')
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class PutPolicyResponse(BaseModel):
    Policy_1: Optional[Policy] = Field(None, alias='Policy')
    PolicyArn: Optional[ResourceArn] = None


class PutProtocolsListRequest(BaseModel):
    ProtocolsList: ProtocolsListData
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class PutResourceSetRequest(BaseModel):
    ResourceSet_1: ResourceSet = Field(..., alias='ResourceSet')
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class PutResourceSetResponse(BaseModel):
    ResourceSet_1: ResourceSet = Field(..., alias='ResourceSet')
    ResourceSetArn: ResourceArn


class RouteHasOutOfScopeEndpointViolation(BaseModel):
    CurrentFirewallSubnetRouteTable: Optional[ResourceId] = None
    CurrentInternetGatewayRouteTable: Optional[ResourceId] = None
    FirewallSubnetId: Optional[ResourceId] = None
    FirewallSubnetRoutes: Optional[Routes] = None
    InternetGatewayId: Optional[ResourceId] = None
    InternetGatewayRoutes: Optional[Routes] = None
    RouteTableId: Optional[ResourceId] = None
    SubnetAvailabilityZone: Optional[LengthBoundedString] = None
    SubnetAvailabilityZoneId: Optional[LengthBoundedString] = None
    SubnetId: Optional[ResourceId] = None
    ViolatingRoutes: Optional[Routes] = None
    VpcId: Optional[ResourceId] = None


class GetComplianceDetailResponse(BaseModel):
    PolicyComplianceDetail_1: Optional[PolicyComplianceDetail] = Field(
        None, alias='PolicyComplianceDetail'
    )


class GetPolicyResponse(BaseModel):
    Policy_1: Optional[Policy] = Field(None, alias='Policy')
    PolicyArn: Optional[ResourceArn] = None


class ResourceViolation(BaseModel):
    AwsEc2InstanceViolation_1: Optional[AwsEc2InstanceViolation] = Field(
        None, alias='AwsEc2InstanceViolation'
    )
    AwsEc2NetworkInterfaceViolation_1: Optional[AwsEc2NetworkInterfaceViolation] = (
        Field(None, alias='AwsEc2NetworkInterfaceViolation')
    )
    AwsVPCSecurityGroupViolation_1: Optional[AwsVPCSecurityGroupViolation] = Field(
        None, alias='AwsVPCSecurityGroupViolation'
    )
    DnsDuplicateRuleGroupViolation_1: Optional[DnsDuplicateRuleGroupViolation] = Field(
        None, alias='DnsDuplicateRuleGroupViolation'
    )
    DnsRuleGroupLimitExceededViolation_1: Optional[
        DnsRuleGroupLimitExceededViolation
    ] = Field(None, alias='DnsRuleGroupLimitExceededViolation')
    DnsRuleGroupPriorityConflictViolation_1: Optional[
        DnsRuleGroupPriorityConflictViolation
    ] = Field(None, alias='DnsRuleGroupPriorityConflictViolation')
    FirewallSubnetIsOutOfScopeViolation_1: Optional[
        FirewallSubnetIsOutOfScopeViolation
    ] = Field(None, alias='FirewallSubnetIsOutOfScopeViolation')
    FirewallSubnetMissingVPCEndpointViolation_1: Optional[
        FirewallSubnetMissingVPCEndpointViolation
    ] = Field(None, alias='FirewallSubnetMissingVPCEndpointViolation')
    NetworkFirewallBlackHoleRouteDetectedViolation_1: Optional[
        NetworkFirewallBlackHoleRouteDetectedViolation
    ] = Field(None, alias='NetworkFirewallBlackHoleRouteDetectedViolation')
    NetworkFirewallInternetTrafficNotInspectedViolation_1: Optional[
        NetworkFirewallInternetTrafficNotInspectedViolation
    ] = Field(None, alias='NetworkFirewallInternetTrafficNotInspectedViolation')
    NetworkFirewallInvalidRouteConfigurationViolation_1: Optional[
        NetworkFirewallInvalidRouteConfigurationViolation
    ] = Field(None, alias='NetworkFirewallInvalidRouteConfigurationViolation')
    NetworkFirewallMissingExpectedRTViolation_1: Optional[
        NetworkFirewallMissingExpectedRTViolation
    ] = Field(None, alias='NetworkFirewallMissingExpectedRTViolation')
    NetworkFirewallMissingExpectedRoutesViolation_1: Optional[
        NetworkFirewallMissingExpectedRoutesViolation
    ] = Field(None, alias='NetworkFirewallMissingExpectedRoutesViolation')
    NetworkFirewallMissingFirewallViolation_1: Optional[
        NetworkFirewallMissingFirewallViolation
    ] = Field(None, alias='NetworkFirewallMissingFirewallViolation')
    NetworkFirewallMissingSubnetViolation_1: Optional[
        NetworkFirewallMissingSubnetViolation
    ] = Field(None, alias='NetworkFirewallMissingSubnetViolation')
    NetworkFirewallPolicyModifiedViolation_1: Optional[
        NetworkFirewallPolicyModifiedViolation
    ] = Field(None, alias='NetworkFirewallPolicyModifiedViolation')
    NetworkFirewallUnexpectedFirewallRoutesViolation_1: Optional[
        NetworkFirewallUnexpectedFirewallRoutesViolation
    ] = Field(None, alias='NetworkFirewallUnexpectedFirewallRoutesViolation')
    NetworkFirewallUnexpectedGatewayRoutesViolation_1: Optional[
        NetworkFirewallUnexpectedGatewayRoutesViolation
    ] = Field(None, alias='NetworkFirewallUnexpectedGatewayRoutesViolation')
    PossibleRemediationActions_1: Optional[PossibleRemediationActions] = Field(
        None, alias='PossibleRemediationActions'
    )
    RouteHasOutOfScopeEndpointViolation_1: Optional[
        RouteHasOutOfScopeEndpointViolation
    ] = Field(None, alias='RouteHasOutOfScopeEndpointViolation')
    ThirdPartyFirewallMissingExpectedRouteTableViolation_1: Optional[
        ThirdPartyFirewallMissingExpectedRouteTableViolation
    ] = Field(None, alias='ThirdPartyFirewallMissingExpectedRouteTableViolation')
    ThirdPartyFirewallMissingFirewallViolation_1: Optional[
        ThirdPartyFirewallMissingFirewallViolation
    ] = Field(None, alias='ThirdPartyFirewallMissingFirewallViolation')
    ThirdPartyFirewallMissingSubnetViolation_1: Optional[
        ThirdPartyFirewallMissingSubnetViolation
    ] = Field(None, alias='ThirdPartyFirewallMissingSubnetViolation')


class ResourceViolations(RootModel[List[ResourceViolation]]):
    root: List[ResourceViolation]


class ViolationDetail(BaseModel):
    MemberAccount: AWSAccountId
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')
    ResourceDescription: Optional[LengthBoundedString] = None
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    ResourceTags: Optional[TagList] = None
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')
    ResourceViolations_1: ResourceViolations = Field(..., alias='ResourceViolations')


class GetViolationDetailsResponse(BaseModel):
    ViolationDetail_1: Optional[ViolationDetail] = Field(None, alias='ViolationDetail')
